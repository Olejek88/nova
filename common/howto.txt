О том какие опции поддерживает драйвер можно узнать запустив его с ключом -h.
Интерфейс взаимодействия с драйвером осуществляется через ариф. выражения
(например "2 * 3 - 4").
BNF выражения:
expr := term
        | term + term
        | term - term

term := prime
        | prime * prime
        | prime / prime

prime := integer
        | float
        | string
        | array
        | func_call
        | (expr)
        | -prime
	| 'n''u''l''l'

array := []
        | [array_elem]

array_elem := expr
        | expr, array_elem

func_call := name()
        | name(func_argv)

func_argv := expr
        | expr, func_argv

string := " chars "
chars :=
        | char chars
char := ascii

integer - 32-bit целое число.
float   - 32-bit число с плавающей точкой.

Со строками поддерживается операция конкатенации, с числами обычные арифметические.
Массивы пока стоят особняком.
Функции:
get(param) - считывание с ВК параметра с номером param.
harchive(no, from, to) - считывание часового архива начиная с from до to.
        Формат даты "Y-m-d H:M:S", параметр no игнорируется.
darchive(no, from, to) - считывание суточного архива начиная с from до to.
        Формат даты "Y-m-d H:M:S", параметр no игнорируется.
marchive(no, from, to) - считывание месячного архива начиная с from до to.
        Формат даты "Y-m-d H:M:S", параметр no игнорируется.
events(from, to) - считывание событий от from до to.

Функции считывание архивов и событий возвращают массив массивов.
Массивы содержат параметры в таком же порядке
как и в таблице сопоставления (если смотреть сверху вниз). 
Также планируется добавить функцию set, для записи параметров.

примеры:
ktm_drv -k ek270 -p /dev/ttyS0 -g 'get(20)' -g '5 * get(17) - 10'
ktm_drv -k ek270 -p /dev/ttyS0 -g 'harchive(0, "", "")'

  Для того чтобы добавить поддержку ВК в программу, необходимо создать
экземпляр структуры vk_operations и добавить привязывания к экземпляру
структуры device (см. файл main.c функция conv_vktype). Для примера
можно посмотреть файл dumb.c

Назначение функций в vk_operations:

init            - инициализация специализированных для определенного ВК
                  данных и если требуется инициализация ВК.
free            - освобождение выделенных init данных. 

send_msg        - функция вызывается из контекста функции dev_query. Отвечает
                  за посылку сообщения.
parse_msg       - также вызывается из dev_query. Должна возвращать 0 если в
                  буфере лежит целое сообщение. В противном случае -1.
check_crc       - также вызывается из dev_query. Проверка контрольной суммы
                  лежащего в буфере сообщения. 0 если всё в порядке, -1 нет.

get             - функция вызывается когда необходимо считать определенный параметр
                  с ВК.
h_archiv        - вызывается когда необходимо считать часовой архив.
m_archiv        - вызывается когда необходимо считать месячный архив.
d_archiv        - вызывается когда необходимо считать дневной архив.
events          - вызывается когда необходимо считать журнал событий.

В device.c находится определение функции dev_query. Она выполняет посылку
запроса и считывание ответа, с учетом установленных таймаутов. При этом:
1. Сообщение считается удачно отправленным если send_msg вернула 0, неудачно если -1.
2. Сообщение считается удачно считанным если parse_msg вернула 0, неудачно если -1 или
   вышел таймаут по ожиданию следующего байта или целого сообщения.
3. В случае неудачной посылки сообщения оно ретранслируется. Если указана задержка, то
   перед посылкой засыпает на указаное время.

Для примера смотрите файл ek270.c, он отвечает за поддержку ЕК 260 и ЕК 270. Реализован
как видите не совсем в полной мере.

